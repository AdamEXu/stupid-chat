Create a functional AI chat application as a single HTML file. The application must connect to OpenRouter API for real AI responses.

REQUIRED COMPONENTS:
1. API key input field
2. Model selector dropdown
3. Chat interface with message history
4. Real-time streaming responses from OpenRouter API

VISUAL DESIGN: Create your own unique styling, colors, and layout while maintaining good UX.

JAVASCRIPT IMPLEMENTATION REQUIREMENTS:

1. Variables and State:
```javascript
let apiKey = "";
let selectedModel = "meta-llama/llama-3.3-70b-instruct:free";
let messages = [];
```

2. Load Models Function:
```javascript
async function loadModels() {
    const response = await fetch("https://openrouter.ai/api/v1/models");
    const data = await response.json();
    // Populate model selector with data.data array
}
```

3. Send Message Function:
```javascript
async function sendMessage(userInput) {
    messages.push({role: "user", content: userInput});

    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            model: selectedModel,
            messages: messages,
            stream: true
        })
    });

    // Handle streaming response
    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let assistantMessage = "";

    while (true) {
        const {done, value} = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
            if (line.startsWith('data: ')) {
                const data = line.slice(6);
                if (data === '[DONE]') break;

                try {
                    const parsed = JSON.parse(data);
                    const content = parsed.choices[0]?.delta?.content;
                    if (content) {
                        assistantMessage += content;
                        // Update UI with new content
                    }
                } catch (e) {
                    // Handle JSON parse errors
                }
            }
        }
    }

    messages.push({role: "assistant", content: assistantMessage});
}
```

Include these exact patterns in your implementation.

HTML STRUCTURE REQUIREMENTS:
- API key input field with save button
- Model selector dropdown
- Chat messages container
- Message input field with send button
- Loading indicators for API calls

CSS STYLING:
Create your own unique visual design. Consider modern UI patterns like:
- Clean typography and spacing
- Responsive layout for mobile/desktop
- Smooth animations and transitions
- Clear visual hierarchy
- Pleasant color scheme

ERROR HANDLING:
- Show error if API key is missing
- Handle API request failures gracefully
- Display loading states during requests
- Validate user input

The provided reference example shows working implementations of all these patterns. Use it as your technical foundation while creating your own visual design.

Output only the complete HTML file content.
