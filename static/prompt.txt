You must output ONLY valid HTML code. No explanations, no descriptions, no additional text. Start with <!DOCTYPE html> and end with </html>.

Create a functional AI chat application as a single HTML file. The application must connect to OpenRouter API for real AI responses.

REQUIRED COMPONENTS:
1. API key input field
2. Model selector dropdown
3. Chat interface with message history
4. Real-time streaming responses from OpenRouter API
5. Markdown parsing for assistant messages (bold, italic, code, links, etc.)

VISUAL DESIGN: Create your own unique styling, colors, and layout while maintaining good UX.

JAVASCRIPT IMPLEMENTATION REQUIREMENTS:

1. Variables and State:
```javascript
let apiKey = "";
let selectedModel = "meta-llama/llama-3.3-70b-instruct:free";
let messages = [];
let isLoading = false;
```

2. Load Models Function:
```javascript
async function loadModels() {
    try {
        const response = await fetch("https://openrouter.ai/api/v1/models");

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.data || !Array.isArray(data.data)) {
            throw new Error("Invalid response format from models API");
        }

        populateModelSelect(data.data);
    } catch (error) {
        console.error("Error loading models:", error);
        // Handle error in UI
    }
}

function populateModelSelect(models) {
    modelSelect.innerHTML = '<option value="">Select a model...</option>';

    const sortedModels = models.sort((a, b) => a.name.localeCompare(b.name));

    sortedModels.forEach((model) => {
        const option = document.createElement("option");
        option.value = model.id;  // Use model.id for value
        option.textContent = model.name;  // Use model.name for display
        modelSelect.appendChild(option);
    });

    // Set default to Llama 3.3 70B free
    const llamaModel = sortedModels.find(model =>
        model.id === "meta-llama/llama-3.3-70b-instruct:free"
    );
    if (llamaModel) {
        selectedModel = llamaModel.id;
        modelSelect.value = selectedModel;
    }
}
```

3. Send Message Function:
```javascript
async function sendMessage() {
    if (!apiKey) {
        showError("Please save your API key first");
        return;
    }

    if (!selectedModel) {
        showError("Please select a model first");
        return;
    }

    const messageText = messageInput.value.trim();
    if (!messageText) return;

    // Add user message
    addMessage("user", messageText);
    messages.push({role: "user", content: messageText});

    // Clear input and show loading
    messageInput.value = "";
    isLoading = true;

    // Add assistant message with loading indicator
    const assistantMessageId = addMessage("assistant", "");
    const assistantBubble = document.querySelector(`[data-message-id="${assistantMessageId}"] .message-bubble`);
    assistantBubble.innerHTML = '<div class="loading"></div>';

    try {
        await streamResponse(assistantBubble);
    } catch (error) {
        console.error("Error sending message:", error);
        assistantBubble.textContent = "Sorry, I encountered an error. Please try again.";
        showError("Failed to send message: " + error.message);
    } finally {
        isLoading = false;
    }
}

async function streamResponse(assistantBubble) {
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            model: selectedModel,
            messages: messages,
            temperature: 0.7,
            max_tokens: 1024,
            stream: true
        })
    });

    if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`);
    }

    const reader = response.body?.getReader();
    if (!reader) {
        throw new Error("Response body is not readable");
    }

    const decoder = new TextDecoder();
    let buffer = "";
    let assistantMessage = "";

    try {
        while (true) {
            const {done, value} = await reader.read();
            if (done) break;

            // Append new chunk to buffer
            buffer += decoder.decode(value, {stream: true});

            // Process complete lines from buffer
            const lines = buffer.split('\n');
            buffer = lines.pop() || ''; // Keep incomplete line in buffer

            for (const line of lines) {
                const trimmedLine = line.trim();

                // Skip empty lines and processing messages
                if (!trimmedLine || trimmedLine.includes('OPENROUTER PROCESSING')) {
                    continue;
                }

                if (trimmedLine.startsWith('data: ')) {
                    const data = trimmedLine.slice(6).trim();
                    if (data === '[DONE]') break;

                    try {
                        const parsed = JSON.parse(data);
                        const content = parsed.choices[0]?.delta?.content;
                        if (content) {
                            assistantMessage += content;
                            assistantBubble.innerHTML = parseMarkdown(assistantMessage);
                        }
                    } catch (e) {
                        console.warn("Failed to parse JSON chunk:", e);
                    }
                }
            }
        }
    } finally {
        reader.cancel();
    }

    // Add complete message to conversation
    if (assistantMessage) {
        messages.push({role: "assistant", content: assistantMessage});
    } else {
        assistantBubble.textContent = "No response received. Please try again.";
    }
}
```

4. Helper Functions:
```javascript
function addMessage(role, content) {
    const messageId = Date.now() + Math.random();
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${role}`;
    messageDiv.setAttribute("data-message-id", messageId);

    const bubbleDiv = document.createElement("div");
    bubbleDiv.className = "message-bubble";
    bubbleDiv.textContent = content;

    messageDiv.appendChild(bubbleDiv);
    chatMessages.appendChild(messageDiv);

    // Auto-scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;

    return messageId;
}

function showError(message) {
    errorMessage.textContent = message;
    errorMessage.style.display = "block";
}

function hideError() {
    errorMessage.style.display = "none";
}

function parseMarkdown(text) {
    // Escape HTML first
    text = text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");

    // Code blocks (```code```)
    text = text.replace(/```([\s\S]*?)```/g, "<pre><code>$1</code></pre>");

    // Inline code (`code`)
    text = text.replace(/`([^`]+)`/g, "<code>$1</code>");

    // Bold (**text** or __text__)
    text = text.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");
    text = text.replace(/__(.*?)__/g, "<strong>$1</strong>");

    // Italic (*text* or _text_)
    text = text.replace(/\*(.*?)\*/g, "<em>$1</em>");
    text = text.replace(/_(.*?)_/g, "<em>$1</em>");

    // Headers
    text = text.replace(/^### (.*$)/gm, "<h3>$1</h3>");
    text = text.replace(/^## (.*$)/gm, "<h2>$1</h2>");
    text = text.replace(/^# (.*$)/gm, "<h1>$1</h1>");

    // Links [text](url)
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');

    // Blockquotes
    text = text.replace(/^> (.*$)/gm, "<blockquote>$1</blockquote>");

    // Line breaks
    text = text.replace(/\n\n/g, "</p><p>");
    text = text.replace(/\n/g, "<br>");

    // Wrap in paragraphs
    if (text && !text.startsWith("<")) {
        text = "<p>" + text + "</p>";
    }

    return text;
}
```

Include these exact patterns in your implementation.

HTML STRUCTURE REQUIREMENTS:
```html
<!-- API Key Section -->
<div class="api-section">
    <label for="api-key">OpenRouter API Key:</label>
    <input type="password" id="api-key" placeholder="Enter your API key">
    <button id="save-key">Save Key</button>
</div>

<!-- Error Message -->
<div id="error-message" style="display: none;"></div>

<!-- Model Selector -->
<select id="model-select">
    <option value="">Loading models...</option>
</select>

<!-- Chat Messages -->
<div id="chat-messages"></div>

<!-- Message Input -->
<div class="input-area">
    <textarea id="message-input" placeholder="Type your message..."></textarea>
    <button id="send-btn">Send</button>
</div>
```

Required element IDs: api-key, save-key, error-message, model-select, chat-messages, message-input, send-btn

CSS STYLING:
Create your own unique visual design. Consider modern UI patterns like:
- Clean typography and spacing
- Responsive layout for mobile/desktop
- Smooth animations and transitions
- Clear visual hierarchy
- Pleasant color scheme

ERROR HANDLING:
- Show error if API key is missing
- Handle API request failures gracefully
- Display loading states during requests
- Validate user input

5. Initialization:
```javascript
// DOM elements (declare at top level)
let apiKeyInput, saveKeyBtn, errorMessage, modelSelect, chatMessages, messageInput, sendBtn;

// Event listeners
document.addEventListener("DOMContentLoaded", function() {
    // Initialize DOM elements
    apiKeyInput = document.getElementById("api-key");
    saveKeyBtn = document.getElementById("save-key");
    errorMessage = document.getElementById("error-message");
    modelSelect = document.getElementById("model-select");
    chatMessages = document.getElementById("chat-messages");
    messageInput = document.getElementById("message-input");
    sendBtn = document.getElementById("send-btn");

    // Load models after DOM elements are initialized
    loadModels();

    saveKeyBtn.addEventListener("click", function() {
        const key = apiKeyInput.value.trim();
        if (!key) {
            showError("Please enter a valid API key");
            return;
        }
        apiKey = key;
        apiKeyInput.value = "";
        hideError();
    });

    sendBtn.addEventListener("click", sendMessage);

    messageInput.addEventListener("keydown", function(e) {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });

    modelSelect.addEventListener("change", function() {
        selectedModel = this.value;
    });
});
```

The provided reference example shows working implementations of all these patterns. Use it as your technical foundation while creating your own visual design.

IMPORTANT: Output ONLY the complete HTML file content. Do not include any explanations, descriptions, or text before or after the HTML. Start with <!DOCTYPE html> and end with </html>. No additional text.
